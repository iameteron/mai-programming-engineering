services:
  api_gateway:
    build:
      context: ./src
      dockerfile: ./api_gateway/Dockerfile
      args:
        - API_PORT
    container_name: api_gateway
    working_dir: /usr/src/app
    depends_on:
        db_node_1:
          condition: service_healthy
        account:
          condition: service_healthy
        user:
          condition: service_healthy
        cargo:
          condition: service_healthy
        delivery:
          condition: service_healthy
        payment:
          condition: service_healthy

    ports:
      - "8000:8000"
    env_file:
      - "env_examples/.db_env"
      - "env_examples/.api_env"
      - "env_examples/.account_env"
      - "env_examples/.user_env"
      - "env_examples/.cargo_env"
      - "env_examples/.payment_env"
    command:
      --port 8000 --host 0.0.0.0
    
  account:
    build:
      context: ./src/services/account
      args:
        - ACCOUNT_SERVICE_PORT
    container_name: account
    working_dir: /usr/src/app
    depends_on:
        db_node_1:
          condition: service_healthy

    ports:
      - "50051:50051"
    env_file:
      - "env_examples/.db_env"
      - "env_examples/.account_env"

    healthcheck:
      test: "python ./health_check/health_check.py"
      interval: 15s
      timeout: 1s
      retries: 5

      
  user:
    build: 
      context: ./src/services/user
      args:
        - USER_SERVICE_PORT
    container_name: user
    working_dir: /usr/src/app
    depends_on:
        db_node_1:
          condition: service_healthy
        redis:
          condition: service_healthy
    ports:
      - "50052:50052"
    env_file:
      - "env_examples/.db_env"
      - "env_examples/.user_env"
      - "env_examples/.redis_env"

    healthcheck:
      test: "python ./health_check/health_check.py"
      interval: 15s
      timeout: 1s
      retries: 5
  
  cargo:
    build:
      context: ./src/services/cargo
      args:
        - CARGO_SERVICE_PORT
    container_name: cargo
    working_dir: /usr/src/app
    depends_on:
        db_node_1:
          condition: service_healthy

    ports:
      - "50053:50053"
    env_file:
      - "env_examples/.db_env"
      - "env_examples/.cargo_env"

    healthcheck:
      test: "python ./health_check/health_check.py"
      interval: 15s
      timeout: 1s
      retries: 5
  
  delivery:
    build:
      context: ./src/services/delivery
      args:
        - DELIVERY_SERVICE_PORT
    container_name: delivery
    working_dir: /usr/src/app
    depends_on:
        db_node_1:
          condition: service_healthy

    ports:
      - "50054:50054"
    env_file:
      - "env_examples/.db_env"
      - "env_examples/.delivery_env"

    healthcheck:
      test: "python ./health_check/health_check.py"
      interval: 15s
      timeout: 1s
      retries: 5

  payment:
    build:
      context: ./src/services/payment
      args:
        - PAYMENT_SERVICE_PORT
    container_name: payment
    working_dir: /usr/src/app
    depends_on:
        db_node_1:
          condition: service_healthy

    ports:
      - "50055:50055"
    env_file:
      - "env_examples/.db_env"
      - "env_examples/.payment_env"

    healthcheck:
      test: "python ./health_check/health_check.py"
      interval: 15s
      timeout: 1s
      retries: 5

  redis:
    image: redis:7
    container_name: redis
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  db_node_1:
    build: ./src/postgres
    container_name: postgres_db
    ports:
      - "5432:5432"
    env_file:
      - "env_examples/.db_env"
      - "env_examples/.api_env"
    healthcheck:
      test: "psql -h localhost -U postgres -d company"
      interval: 15s
      timeout: 1s
      retries: 5
    volumes:
      - postgres_data:/var/lib/postgresql/data

  mongo_node_1:
    image: mongo:5.0
    container_name: mongo
    ports:
      - "27017:27017"
    env_file:
      - "env_examples/.mongo_env"
    healthcheck:
      test: ["CMD", "mongo", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - mongo_data:/data/db
      - ./src/mongo:/docker-entrypoint-initdb.d:ro

volumes:
  postgres_data:
  mongo_data: